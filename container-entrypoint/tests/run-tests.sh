#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Universal Docker Entrypoint

set -uo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOCKER_DIR="$SCRIPT_DIR/docker"

cd "$DOCKER_DIR"

# –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø—ã
CURRENT_USER_ID=$(id -u)
CURRENT_GROUP_ID=10000 #$(id -g)

# –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∫–∏
BUILD_DATE=$(date -Iseconds)
GIT_COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "unknown")
BUILD_NUMBER=${BUILD_NUMBER:-local}

echo "üß™ Universal Docker Entrypoint Test Suite"
echo "=========================================="
echo "Using current user: UID=$CURRENT_USER_ID, GID=$CURRENT_GROUP_ID"
echo "Build metadata:"
echo "  Build Date: $BUILD_DATE"
echo "  Git Commit: $GIT_COMMIT"
echo "  Git Branch: $GIT_BRANCH"
echo "  Build Number: $BUILD_NUMBER"
echo ""

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è docker compose
export CURRENT_USER_ID
export CURRENT_GROUP_ID
export BUILD_DATE
export GIT_COMMIT
export GIT_BRANCH
export BUILD_NUMBER

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
run_test() {
    local profile="$1"
    local description="$2"
    local test_result=0

    echo "üîç Running test: $description"
    echo "Profile: $profile"
    echo ""

    if docker compose --profile "$profile" up --build --remove-orphans; then
        echo "‚úÖ Test PASSED: $description"
        test_result=0
    else
        echo "‚ùå Test FAILED: $description"
        test_result=1
    fi

    echo ""
    echo "üßπ Cleaning up..."
    docker compose --profile "$profile" down --remove-orphans --volumes
    echo ""
    echo "----------------------------------------"
    echo ""

    return $test_result
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–∞
show_image_metadata() {
    local profile="$1"
    local image_name="docker-$profile"

    echo "üìã Image metadata for $profile:"
    docker inspect "$image_name" --format '{{json .Config.Labels}}' | jq -r '
        to_entries[] |
        select(.key | startswith("org.opencontainers.image") or startswith("org.label-schema") or . == "test.type") |
        "\(.key): \(.value)"
    ' 2>/dev/null || echo "  No metadata available"
    echo ""
}

# –ú–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤: –ø—Ä–æ—Ñ–∏–ª—å, –æ–ø–∏—Å–∞–Ω–∏–µ
declare -a TESTS=(
    "dry-run|DRY RUN Mode - Show execution plan"
    "standard|Standard Mode - Minimal setup"
    "skip-all|SKIP ALL Mode - Direct command execution"
    "init-only|INIT ONLY Mode - Initialization without command"
    "full|Full Mode - With init scripts and dependencies"
    "soft-errors|Soft Error Policy - Continue on errors"
    "timeout-test|Dependencies timeout - Stop on timeout"
)

# –°—á–µ—Ç—á–∏–∫–∏
TOTAL_TESTS=${#TESTS[@]}
PASSED_TESTS=0
FAILED_TESTS=0

echo "üöÄ Starting $TOTAL_TESTS tests..."
echo ""

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
for test_spec in "${TESTS[@]}"; do
    IFS='|' read -r profile description <<< "$test_spec"

    if run_test "$profile" "$description"; then
        ((PASSED_TESTS++))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        show_image_metadata "$profile"
    else
        ((FAILED_TESTS++))
        echo "‚ö†Ô∏è  Continuing with remaining tests..."
        echo ""
    fi
done

# –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
echo "üìä TEST SUMMARY"
echo "==============="
echo "Total tests:  $TOTAL_TESTS"
echo "Passed:       $PASSED_TESTS"
echo "Failed:       $FAILED_TESTS"
echo ""

if [[ $FAILED_TESTS -eq 0 ]]; then
    echo "üéâ All tests PASSED!"
    exit 0
else
    echo "üí• Some tests FAILED!"
    exit 1
fi